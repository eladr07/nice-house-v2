# Generated by Django 2.2.1 on 2019-05-27 08:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('reversion', '0001_squashed_0004_auto_20160611_1202'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(unique=True, verbose_name='account_num')),
                ('bank', models.CharField(max_length=20, verbose_name='bank')),
                ('branch', models.CharField(max_length=20, verbose_name='branch')),
                ('branch_num', models.SmallIntegerField(verbose_name='branch_num')),
                ('payee', models.CharField(max_length=20, verbose_name='payee')),
            ],
            options={
                'db_table': 'Account',
            },
        ),
        migrations.CreateModel(
            name='ActivityBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_date', models.DateField(verbose_name='from_date')),
                ('to_date', models.DateField(verbose_name='to_date')),
                ('office_meetings_num', models.PositiveSmallIntegerField(verbose_name='office_meetings_num')),
                ('recurring_meetings_num', models.PositiveSmallIntegerField(verbose_name='recurring_meetings_num')),
                ('new_meetings_from_phone_num', models.PositiveSmallIntegerField(verbose_name='new_meetings_from_phone_num')),
            ],
            options={
                'db_table': 'ActivityBase',
            },
        ),
        migrations.CreateModel(
            name='AmountType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'AmountType',
            },
        ),
        migrations.CreateModel(
            name='BDiscountSave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('precentage_bonus', models.PositiveIntegerField(verbose_name='precentage_bonus')),
                ('max_for_bonus', models.FloatField(blank=True, null=True, verbose_name='max_bonus')),
            ],
            options={
                'db_table': 'BDiscountSave',
            },
        ),
        migrations.CreateModel(
            name='BDiscountSavePrecentage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('precentage_bonus', models.FloatField(verbose_name='precentage_bonus')),
                ('max_for_bonus', models.FloatField(blank=True, null=True, verbose_name='max_bonus')),
            ],
            options={
                'db_table': 'BDiscountSavePrecentage',
            },
        ),
        migrations.CreateModel(
            name='BHouseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'BHouseType',
            },
        ),
        migrations.CreateModel(
            name='BSaleRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'BSaleRate',
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.CharField(max_length=4, verbose_name='building_num')),
                ('name', models.CharField(blank=True, max_length=10, null=True, verbose_name='name')),
                ('floors', models.PositiveSmallIntegerField(verbose_name='floors')),
                ('house_count', models.PositiveSmallIntegerField(verbose_name='houses_num')),
                ('stage', models.CharField(blank=True, max_length=1, null=True, verbose_name='stage')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'db_table': 'Building',
                'permissions': (('building_clients', 'Building Clients'), ('building_clients_pdf', 'Building Clients PDF'), ('copy_building', 'Can copy building')),
            },
        ),
        migrations.CreateModel(
            name='BuildingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'BuildingType',
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(unique=True, verbose_name='car_num')),
                ('owner', models.CharField(max_length=20, verbose_name='car_owner')),
                ('insurance_expire_date', models.DateField(verbose_name='insurance_expire_date')),
                ('insurance_man', models.CharField(max_length=20, verbose_name='insurance_man')),
                ('insurance_phone', models.CharField(max_length=10, verbose_name='insurance_phone')),
                ('tow_company', models.CharField(max_length=20, verbose_name='tow_company')),
                ('tow_phone', models.CharField(max_length=10, verbose_name='tow_phone')),
                ('compulsory_insurance_cost', models.IntegerField(verbose_name='compulsory_insurance_cost')),
                ('comprehensive_insurance_cost', models.IntegerField(verbose_name='comprehensive_insurance_cost')),
            ],
            options={
                'db_table': 'Car',
            },
        ),
        migrations.CreateModel(
            name='CByPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'CByPrice',
            },
        ),
        migrations.CreateModel(
            name='CheckBaseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'CheckBaseType',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'City',
            },
        ),
        migrations.CreateModel(
            name='ClientStatusType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'ClientStatusType',
            },
        ),
        migrations.CreateModel(
            name='ClientType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'ClientType',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, verbose_name='first_name')),
                ('last_name', models.CharField(max_length=20, verbose_name='last_name')),
                ('cell_phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='cell_phone')),
                ('mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='mail')),
                ('address', models.CharField(blank=True, max_length=40, null=True, verbose_name='address')),
                ('role', models.CharField(blank=True, max_length=20, null=True, verbose_name='role')),
                ('phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='phone')),
                ('fax', models.CharField(blank=True, max_length=10, null=True, verbose_name='fax')),
                ('company', models.CharField(blank=True, max_length=20, null=True, verbose_name='company')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
            ],
            options={
                'db_table': 'Contact',
                'unique_together': {('first_name', 'last_name')},
            },
        ),
        migrations.CreateModel(
            name='CVar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_retro', models.BooleanField(verbose_name='retroactive')),
            ],
            options={
                'db_table': 'CVar',
            },
        ),
        migrations.CreateModel(
            name='CVarPrecentage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_retro', models.BooleanField(verbose_name='retroactive')),
                ('start_retro', models.PositiveSmallIntegerField(blank=True, default=1, null=True, verbose_name='retroactive_start')),
            ],
            options={
                'db_table': 'CVarPrecentage',
            },
        ),
        migrations.CreateModel(
            name='CVarPrecentageFixed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_retro', models.BooleanField(verbose_name='retroactive')),
                ('first_count', models.PositiveSmallIntegerField(verbose_name='cvf first count')),
                ('first_precentage', models.FloatField(verbose_name='commission precentage')),
                ('step', models.FloatField(verbose_name='cvf step')),
                ('last_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='cvf last count')),
                ('last_precentage', models.FloatField(blank=True, null=True, verbose_name='commission precentage')),
            ],
            options={
                'db_table': 'CVarPrecentageFixed',
            },
        ),
        migrations.CreateModel(
            name='CZilber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base', models.FloatField(verbose_name='commission_base')),
                ('b_discount', models.FloatField(verbose_name='b_discount')),
                ('b_sale_rate', models.FloatField(verbose_name='b_sale_rate')),
                ('b_sale_rate_max', models.FloatField(verbose_name='max_commission')),
                ('base_madad', models.FloatField(verbose_name='madad_base')),
                ('third_start', models.DateField(verbose_name='third_start')),
            ],
            options={
                'db_table': 'CZilber',
            },
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=30, null=True, verbose_name='address')),
                ('rooms', models.FloatField(blank=True, null=True, verbose_name='rooms')),
                ('floor', models.IntegerField(blank=True, null=True, verbose_name='floor')),
                ('price', models.IntegerField(blank=True, null=True, verbose_name='price')),
                ('commission_precentage', models.FloatField(blank=True, null=True, verbose_name='commission_precentage')),
                ('commission', models.FloatField(blank=True, null=True, verbose_name='commission')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('client_status_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.ClientStatusType', verbose_name='client_status_type')),
            ],
            options={
                'db_table': 'Deal',
            },
        ),
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='month')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='year')),
                ('sale_count', models.PositiveSmallIntegerField(default=0, verbose_name='sale_count')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('is_finished', models.BooleanField(default=False, editable=False)),
                ('force_fully_paid', models.BooleanField(default=False, editable=False)),
                ('sales_commission', models.IntegerField(default=0, editable=False)),
            ],
            options={
                'db_table': 'Demand',
                'ordering': ['year', 'month', 'project'],
                'permissions': (('list_demand', 'Can list demands'), ('demand_pdf', 'Demand PDF'), ('demands_pdf', 'Demands PDF'), ('demand_season', 'Demand Season'), ('demand_season_pdf', 'Demand Season PDF'), ('demand_remarks', 'Demand Remarks'), ('demand_sale_count', 'Demand Sale Count'), ('demand_invoices', 'Demand Invoices'), ('demand_payments', 'Demand Payments'), ('season_income', 'Season Income'), ('demand_force_fully_paid', 'Demand Force Fully Paid'), ('demand_followup', 'Demand followup'), ('demand_pay_balance', 'Demand pay balance'), ('demand_followup_pdf', 'Demand followup PDF')),
                'get_latest_by': 'month',
            },
        ),
        migrations.CreateModel(
            name='DemandStatusType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'DemandStatusType',
            },
        ),
        migrations.CreateModel(
            name='DivisionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'DivisionType',
                'permissions': (('global_profit_lost', 'Global profit & loss'),),
            },
        ),
        migrations.CreateModel(
            name='EmployeeBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, verbose_name='first_name')),
                ('last_name', models.CharField(max_length=20, verbose_name='last_name')),
                ('cell_phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='cell_phone')),
                ('mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='mail')),
                ('address', models.CharField(blank=True, max_length=40, null=True, verbose_name='address')),
                ('role', models.CharField(blank=True, max_length=20, null=True, verbose_name='role')),
                ('pid', models.PositiveIntegerField(unique=True, verbose_name='pid')),
                ('birth_date', models.DateField(verbose_name='birth_date')),
                ('work_phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='work_phone')),
                ('work_fax', models.CharField(blank=True, max_length=10, null=True, verbose_name='work_fax')),
                ('home_phone', models.CharField(max_length=10, verbose_name='home_phone')),
                ('mate_phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='mate_phone')),
                ('family_state', models.PositiveIntegerField(choices=[(1, 'רווק'), (2, 'נשוי'), (3, 'גרוש'), (4, 'אלמן')], verbose_name='family state')),
                ('child_num', models.PositiveIntegerField(blank=True, null=True, verbose_name='child num')),
                ('work_start', models.DateField(verbose_name='work start')),
                ('work_end', models.DateField(blank=True, null=True, verbose_name='work end')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('account', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='employeebase', to='Management.Account')),
            ],
            options={
                'db_table': 'EmployeeBase',
            },
        ),
        migrations.CreateModel(
            name='EmployeeSalaryBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], editable=False, verbose_name='month')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], editable=False, verbose_name='year')),
                ('base', models.FloatField(null=True, verbose_name='salary_base')),
                ('commissions', models.FloatField(editable=False, null=True, verbose_name='commissions')),
                ('safety_net', models.FloatField(blank=True, null=True, verbose_name='safety_net')),
                ('var_pay', models.FloatField(blank=True, null=True, verbose_name='var_pay')),
                ('var_pay_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='var_pay_type')),
                ('refund', models.FloatField(blank=True, null=True, verbose_name='refund')),
                ('refund_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='refund_type')),
                ('deduction', models.FloatField(blank=True, null=True, verbose_name='deduction')),
                ('deduction_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='deduction_type')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('pdf_remarks', models.TextField(blank=True, null=True, verbose_name='pdf_remarks')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'db_table': 'EmployeeSalaryBase',
                'ordering': ['year', 'month'],
                'permissions': (('salaries_bank', 'Salaries for bank'), ('employee_salary_delete', 'Delete salary')),
            },
        ),
        migrations.CreateModel(
            name='EmployeeSalaryBaseStatusType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'EmployeeSalaryBaseStatusType',
            },
        ),
        migrations.CreateModel(
            name='ExpenseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'ExpenseType',
            },
        ),
        migrations.CreateModel(
            name='HireType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('salary_net', models.NullBooleanField()),
                ('include_tax', models.BooleanField()),
            ],
            options={
                'db_table': 'HireType',
            },
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.CharField(max_length=5, verbose_name='house_num')),
                ('floor', models.PositiveSmallIntegerField(verbose_name='floor')),
                ('rooms', models.FloatField(verbose_name='rooms')),
                ('net_size', models.FloatField(verbose_name='net_size')),
                ('garden_size', models.FloatField(blank=True, null=True, verbose_name='garden_size')),
                ('remarks', models.CharField(blank=True, max_length=200, null=True, verbose_name='remarks')),
                ('bruto_size', models.FloatField(blank=True, null=True, verbose_name='bruto_size')),
                ('load_precentage', models.FloatField(blank=True, null=True, verbose_name='load_precentage')),
                ('parking_size', models.FloatField(blank=True, null=True, verbose_name='parking_size')),
                ('is_sold', models.BooleanField(default=False, verbose_name='is_sold')),
                ('building', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='houses', to='Management.Building', verbose_name='building')),
            ],
            options={
                'db_table': 'House',
                'ordering': ['num'],
            },
        ),
        migrations.CreateModel(
            name='HouseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'HouseType',
            },
        ),
        migrations.CreateModel(
            name='IncomeProducerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'IncomeProducerType',
            },
        ),
        migrations.CreateModel(
            name='IncomeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'IncomeType',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(blank=True, null=True, unique=True, verbose_name='invoice_num')),
                ('creation_date', models.DateField(auto_now_add=True)),
                ('date', models.DateField(verbose_name='invoice_date')),
                ('amount', models.IntegerField(verbose_name='amount')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
            ],
            options={
                'db_table': 'Invoice',
                'ordering': ['creation_date'],
                'get_latest_by': 'creation_date',
            },
        ),
        migrations.CreateModel(
            name='InvoiceOffset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
                ('amount', models.IntegerField(verbose_name='amount')),
                ('reason', models.CharField(max_length=30, verbose_name='reason')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
            ],
            options={
                'db_table': 'InvoiceOffset',
            },
        ),
        migrations.CreateModel(
            name='Lawyer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, verbose_name='first_name')),
                ('last_name', models.CharField(max_length=20, verbose_name='last_name')),
                ('cell_phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='cell_phone')),
                ('mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='mail')),
                ('address', models.CharField(blank=True, max_length=40, null=True, verbose_name='address')),
                ('role', models.CharField(blank=True, max_length=20, null=True, verbose_name='role')),
                ('phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='phone')),
            ],
            options={
                'db_table': 'Lawyer',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='name')),
                ('url', models.URLField(verbose_name='url')),
            ],
            options={
                'db_table': 'Link',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'Media',
            },
        ),
        migrations.CreateModel(
            name='NHBranch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='name')),
                ('address', models.CharField(blank=True, max_length=40, null=True, verbose_name='address')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='phone')),
                ('mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='mail')),
                ('fax', models.CharField(blank=True, max_length=15, null=True, verbose_name='fax')),
                ('url', models.URLField(blank=True, null=True, verbose_name='url')),
            ],
            options={
                'db_table': 'NHBranch',
                'permissions': (('nhbranch_1', 'NHBranch Shoham'), ('nhbranch_2', 'NHBranch Modiin'), ('nhbranch_3', 'NHBranch Nes Ziona')),
            },
        ),
        migrations.CreateModel(
            name='NHIncomeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'NHIncomeType',
            },
        ),
        migrations.CreateModel(
            name='NHMonth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='month')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='year')),
                ('is_closed', models.BooleanField(default=False, editable=False)),
                ('nhbranch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHBranch', verbose_name='nhbranch')),
            ],
            options={
                'db_table': 'NHMonth',
                'ordering': ['year', 'month'],
                'permissions': (('nhmonth_season', 'NHMonth Season'), ('nh_season_profit', 'NH season profit')),
                'unique_together': {('nhbranch', 'year', 'month')},
            },
        ),
        migrations.CreateModel(
            name='NHSale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(unique=True, verbose_name='sale_num')),
                ('address', models.CharField(max_length=50, verbose_name='address')),
                ('hood', models.CharField(max_length=50, verbose_name='hood')),
                ('rooms', models.FloatField(verbose_name='rooms')),
                ('floor', models.PositiveSmallIntegerField(verbose_name='floor')),
                ('sale_date', models.DateField(verbose_name='sale_date')),
                ('price', models.FloatField(verbose_name='price')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('nhmonth', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='nhsales', to='Management.NHMonth')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.HouseType', verbose_name='house_type')),
            ],
            options={
                'db_table': 'NHSale',
                'permissions': (('nhsale_move_nhmonth', 'NHSale Move Month'),),
            },
        ),
        migrations.CreateModel(
            name='NHSaleFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'NHSaleFilter',
            },
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'Operator',
            },
        ),
        migrations.CreateModel(
            name='ParkingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'ParkingType',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'PaymentType',
            },
        ),
        migrations.CreateModel(
            name='Pricelist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('include_tax', models.NullBooleanField(verbose_name='include_tax')),
                ('include_lawyer', models.NullBooleanField(verbose_name='include_lawyer')),
                ('include_parking', models.NullBooleanField(verbose_name='include_parking')),
                ('include_storage', models.NullBooleanField(verbose_name='include_storage')),
                ('include_registration', models.NullBooleanField(verbose_name='include_registration')),
                ('include_guarantee', models.NullBooleanField(verbose_name='include_guarantee')),
                ('settle_date', models.DateField(blank=True, null=True, verbose_name='settle_date')),
                ('allowed_discount', models.FloatField(default=0, verbose_name='allowed_discount')),
                ('is_permit', models.NullBooleanField(verbose_name='is_permit')),
                ('permit_date', models.DateField(blank=True, null=True, verbose_name='permit_date')),
                ('lawyer_fee', models.FloatField(default=0, verbose_name='lawyer_fee')),
                ('register_amount', models.FloatField(default=0, verbose_name='register_amount')),
                ('guarantee_amount', models.FloatField(default=0, verbose_name='guarantee_amount')),
                ('storage_cost', models.FloatField(blank=True, null=True, verbose_name='storage_cost')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
            ],
            options={
                'db_table': 'Pricelist',
            },
        ),
        migrations.CreateModel(
            name='PricelistType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'PricelistType',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initiator', models.CharField(max_length=30, verbose_name='initiator')),
                ('name', models.CharField(max_length=30, verbose_name='project name')),
                ('city', models.CharField(max_length=30, verbose_name='city')),
                ('hood', models.CharField(max_length=30, verbose_name='hood')),
                ('office_address', models.CharField(max_length=30, verbose_name='office address')),
                ('phone', models.CharField(max_length=15, verbose_name='project phone')),
                ('cell_phone', models.CharField(max_length=15, verbose_name='project cell phone')),
                ('fax', models.CharField(max_length=15, verbose_name='project fax')),
                ('mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='mail')),
                ('is_marketing', models.BooleanField(choices=[(False, 'לא'), (True, 'כן')], verbose_name='is_marketing')),
                ('start_date', models.DateField(verbose_name='startdate')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='enddate')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='special_data')),
                ('contacts', models.ManyToManyField(editable=False, related_name='projects', to='Management.Contact')),
                ('demand_contact', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projects_demand', to='Management.Contact')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
                'db_table': 'Project',
                'ordering': ['initiator', 'name'],
                'permissions': (('projects_profit', 'Projects profit'), ('project_list_pdf', 'Projects list PDF')),
            },
        ),
        migrations.CreateModel(
            name='PurposeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'PurposeType',
            },
        ),
        migrations.CreateModel(
            name='RankType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='rank')),
            ],
            options={
                'db_table': 'RankType',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='content')),
            ],
            options={
                'db_table': 'Reminder',
            },
        ),
        migrations.CreateModel(
            name='ReminderStatusType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'ReminderStatusType',
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_date', models.DateField(verbose_name='sale_date')),
                ('price', models.IntegerField(verbose_name='sale_price')),
                ('company_price', models.IntegerField(blank=True, null=True, verbose_name='company_price')),
                ('commission_madad_bi', models.FloatField(blank=True, null=True, verbose_name='commission_madad')),
                ('include_registration', models.NullBooleanField(choices=[(None, 'לא משנה'), (False, 'לא'), (True, 'כן')], default=None, verbose_name='include_registration')),
                ('price_include_lawyer', models.BooleanField(choices=[(False, 'לא'), (True, 'כן')], verbose_name='price_include_lawyer')),
                ('price_no_lawyer', models.IntegerField(verbose_name='sale_price_no_lawyer')),
                ('include_tax', models.BooleanField(choices=[(False, 'לא'), (True, 'כן')], default=True, verbose_name='include_tax')),
                ('specification_expense', models.PositiveIntegerField(default=0, verbose_name='specification_expense')),
                ('other_expense', models.PositiveIntegerField(default=0, verbose_name='other_expense')),
                ('clients', models.TextField(verbose_name='clients')),
                ('clients_phone', models.CharField(max_length=10, verbose_name='phone')),
                ('price_final', models.IntegerField(editable=False, null=True)),
                ('employee_pay_month', models.PositiveSmallIntegerField(editable=False, verbose_name='employee_pay_month')),
                ('employee_pay_year', models.PositiveSmallIntegerField(editable=False, verbose_name='employee_pay_year')),
                ('contractor_pay_month', models.PositiveSmallIntegerField(editable=False, verbose_name='contractor_pay_month')),
                ('contractor_pay_year', models.PositiveSmallIntegerField(editable=False, verbose_name='contractor_pay_year')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('contract_num', models.CharField(blank=True, max_length=10, null=True, verbose_name='so_contact_num')),
                ('discount', models.FloatField(blank=True, null=True, verbose_name='given_discount')),
                ('allowed_discount', models.FloatField(blank=True, null=True, verbose_name='allowed_discount')),
                ('commission_include', models.BooleanField(blank=True, default=True, verbose_name='commission include')),
                ('demand', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='sales', to='Management.Demand')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales', to='Management.House', verbose_name='house')),
            ],
            options={
                'db_table': 'Sale',
                'ordering': ['sale_date'],
                'permissions': (('reject_sale', 'Can reject sales'), ('cancel_sale', 'Can cancel sales'), ('pre_sale', 'Can pre sales'), ('sale_analysis', 'Sale analysis')),
            },
        ),
        migrations.CreateModel(
            name='SaleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'SaleType',
            },
        ),
        migrations.CreateModel(
            name='SignupCancel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='cancel_date')),
                ('was_signed', models.BooleanField(choices=[(False, 'לא'), (True, 'כן')], verbose_name='was_signed_cancel_form')),
                ('was_fee', models.BooleanField(choices=[(False, 'לא'), (True, 'כן')], verbose_name='was_fee')),
                ('reason', models.TextField(blank=True, null=True, verbose_name='cancel_reason')),
            ],
            options={
                'db_table': 'SignupCancel',
            },
        ),
        migrations.CreateModel(
            name='SupplierType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='name')),
            ],
            options={
                'db_table': 'SupplierType',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'db_table': 'Tag',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
                ('value', models.FloatField(verbose_name='value')),
            ],
            options={
                'verbose_name': 'tax',
                'db_table': 'Tax',
                'ordering': ['-date'],
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employeebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Management.EmployeeBase')),
            ],
            options={
                'verbose_name': 'employee',
                'verbose_name_plural': 'employees',
                'db_table': 'Employee',
                'ordering': ['rank', '-work_start'],
            },
            bases=('Management.employeebase',),
        ),
        migrations.CreateModel(
            name='EmployeeSalary',
            fields=[
                ('employeesalarybase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Management.EmployeeSalaryBase')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='salaries', to='Management.Employee', verbose_name='employee')),
            ],
            options={
                'db_table': 'EmployeeSalary',
                'permissions': (('season_employeesalary', 'Season employee salary'),),
            },
            bases=('Management.employeesalarybase',),
        ),
        migrations.CreateModel(
            name='NHActivity',
            fields=[
                ('activitybase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Management.ActivityBase')),
                ('nhbranch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHBranch', verbose_name='nhbranch')),
            ],
            options={
                'db_table': 'NHActivity',
            },
            bases=('Management.activitybase',),
        ),
        migrations.CreateModel(
            name='NHEmployee',
            fields=[
                ('employeebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Management.EmployeeBase')),
            ],
            options={
                'db_table': 'NHEmployee',
                'ordering': ['-work_start'],
            },
            bases=('Management.employeebase',),
        ),
        migrations.CreateModel(
            name='NHEmployeeSalary',
            fields=[
                ('employeesalarybase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Management.EmployeeSalaryBase')),
                ('admin_commission', models.IntegerField(editable=False, null=True)),
                ('nhbranch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.NHBranch', verbose_name='nhbranch')),
                ('nhemployee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='salaries', to='Management.NHEmployee', verbose_name='nhemployee')),
            ],
            options={
                'db_table': 'NHEmployeeSalary',
            },
            bases=('Management.employeesalarybase',),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='content')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('is_done', models.BooleanField(default=False, editable=False)),
                ('time_done', models.DateTimeField(editable=False, null=True)),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('sender', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='task_requests', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tasks', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'db_table': 'Task',
                'ordering': ['is_done', '-time'],
            },
        ),
        migrations.CreateModel(
            name='SaleReject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now=True, verbose_name='date')),
                ('remarks', models.TextField(null=True, verbose_name='remarks')),
                ('to_month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='reject_month')),
                ('to_year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='reject_year')),
                ('employee_pay_month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='employee_pay_month')),
                ('employee_pay_year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='employee_pay_year')),
                ('sale', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='salereject', to='Management.Sale')),
            ],
            options={
                'db_table': 'SaleReject',
            },
        ),
        migrations.CreateModel(
            name='SaleRateBonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('house_count', models.PositiveSmallIntegerField(verbose_name='house count')),
                ('amount', models.PositiveIntegerField(verbose_name='commission amount')),
                ('b_sale_rate', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bonuses', to='Management.BSaleRate')),
            ],
            options={
                'db_table': 'SaleRateBonus',
                'ordering': ['house_count'],
            },
        ),
        migrations.CreateModel(
            name='SaleProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField(verbose_name='price')),
                ('objection', models.TextField(blank=True, max_length=200, null=True, verbose_name='objection')),
                ('remarks', models.TextField(blank=True, max_length=200, null=True, verbose_name='remarks')),
                ('activity_base', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='Management.ActivityBase')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.Building', verbose_name='building')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.House', verbose_name='house')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.Project', verbose_name='project')),
            ],
            options={
                'db_table': 'SaleProcess',
            },
        ),
        migrations.CreateModel(
            name='SalePriceMod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now=True, verbose_name='date')),
                ('remarks', models.TextField(null=True, verbose_name='remarks')),
                ('old_price', models.IntegerField()),
                ('sale', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='salepricemod', to='Management.Sale')),
            ],
            options={
                'db_table': 'SalePriceMod',
            },
        ),
        migrations.CreateModel(
            name='SalePre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now=True, verbose_name='date')),
                ('remarks', models.TextField(null=True, verbose_name='remarks')),
                ('to_month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='reject_month')),
                ('to_year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='reject_year')),
                ('employee_pay_month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='employee_pay_month')),
                ('employee_pay_year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='employee_pay_year')),
                ('sale', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='salepre', to='Management.Sale')),
            ],
            options={
                'db_table': 'SalePre',
            },
        ),
        migrations.CreateModel(
            name='SaleHouseMod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now=True, verbose_name='date')),
                ('remarks', models.TextField(null=True, verbose_name='remarks')),
                ('old_house', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.House')),
                ('sale', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='salehousemod', to='Management.Sale')),
            ],
            options={
                'db_table': 'SaleHouseMod',
            },
        ),
        migrations.CreateModel(
            name='SaleCancel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now=True, verbose_name='date')),
                ('remarks', models.TextField(null=True, verbose_name='remarks')),
                ('deduct_from_demand', models.BooleanField(blank=True, verbose_name='deduct_from_demand')),
                ('sale', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='salecancel', to='Management.Sale')),
            ],
            options={
                'db_table': 'SaleCancel',
            },
        ),
        migrations.CreateModel(
            name='RevisionExt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('revision', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reversion.Revision')),
            ],
            options={
                'db_table': 'RevisionExt',
            },
        ),
        migrations.CreateModel(
            name='ReminderStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('reminder', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='statuses', to='Management.Reminder')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.ReminderStatusType')),
            ],
            options={
                'db_table': 'ReminderStatus',
                'ordering': ['-time'],
                'get_latest_by': 'time',
            },
        ),
        migrations.CreateModel(
            name='ProjectDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('architect', models.CharField(max_length=30, verbose_name='architect')),
                ('houses_num', models.PositiveSmallIntegerField(verbose_name='houses_num')),
                ('buildings_num', models.PositiveSmallIntegerField(verbose_name='buildings_num')),
                ('bank', models.CharField(max_length=20, verbose_name='accompanied_bank')),
                ('url', models.URLField(blank=True, null=True, verbose_name='url')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('building_types', models.ManyToManyField(to='Management.BuildingType', verbose_name='building_types')),
            ],
            options={
                'db_table': 'ProjectDetails',
            },
        ),
        migrations.CreateModel(
            name='ProjectCommission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_amount', models.PositiveIntegerField(blank=True, null=True, verbose_name='add_amount')),
                ('add_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='add_type')),
                ('registration_amount', models.PositiveIntegerField(blank=True, null=True, verbose_name='registration_amount')),
                ('deduct_registration', models.NullBooleanField(choices=[(None, 'לא משנה'), (False, 'לא'), (True, 'כן')], verbose_name='deduct_registration_from_price_no_lawyer')),
                ('include_tax', models.NullBooleanField(default=True, verbose_name='commission_include_tax')),
                ('include_lawyer', models.NullBooleanField(choices=[(None, 'לא משנה'), (False, 'לא'), (True, 'כן')], verbose_name='commission_include_lawyer')),
                ('commission_by_signups', models.BooleanField(blank=True, verbose_name='commission_by_signups')),
                ('max', models.FloatField(blank=True, null=True, verbose_name='max_commission')),
                ('agreement', models.FileField(blank=True, null=True, upload_to='files', verbose_name='agreement')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='commission_remarks')),
                ('b_discount_save_precentage', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projectcommission', to='Management.BDiscountSavePrecentage')),
                ('c_var_precentage', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projectcommission', to='Management.CVarPrecentage')),
                ('c_var_precentage_fixed', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projectcommission', to='Management.CVarPrecentageFixed')),
                ('c_zilber', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projectcommission', to='Management.CZilber')),
                ('project', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='commissions', to='Management.Project')),
            ],
            options={
                'db_table': 'ProjectCommission',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='details',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.ProjectDetails'),
        ),
        migrations.AddField(
            model_name='project',
            name='payment_contact',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='projects_payment', to='Management.Contact'),
        ),
        migrations.AddField(
            model_name='project',
            name='reminders',
            field=models.ManyToManyField(editable=False, to='Management.Reminder'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(blank=True, null=True, verbose_name='check_num')),
                ('support_num', models.IntegerField(blank=True, null=True, verbose_name='support_num')),
                ('bank', models.CharField(blank=True, max_length=40, null=True, verbose_name='bank')),
                ('branch_num', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='branch_num')),
                ('payment_date', models.DateField(verbose_name='payment_date')),
                ('creation_date', models.DateField(auto_now_add=True)),
                ('amount', models.IntegerField(verbose_name='amount')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('payment_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.PaymentType', verbose_name='payment_type')),
            ],
            options={
                'db_table': 'Payment',
                'ordering': ['creation_date'],
                'get_latest_by': 'creation_date',
            },
        ),
        migrations.CreateModel(
            name='NHSaleSide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name1', models.CharField(max_length=20, verbose_name='name')),
                ('name2', models.CharField(blank=True, max_length=20, null=True, verbose_name='name')),
                ('phone1', models.CharField(max_length=20, verbose_name='phone')),
                ('phone2', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone')),
                ('address', models.CharField(max_length=40, verbose_name='address')),
                ('employee1_commission', models.FloatField(verbose_name='commission_precent')),
                ('employee2_commission', models.FloatField(blank=True, null=True, verbose_name='commission_precent')),
                ('employee3_commission', models.FloatField(blank=True, null=True, verbose_name='commission_precent')),
                ('director_commission', models.FloatField(blank=True, null=True, verbose_name='commission_precent')),
                ('signed_commission', models.FloatField(verbose_name='signed_commission')),
                ('actual_commission', models.FloatField(verbose_name='actual_commission')),
                ('income', models.IntegerField(blank=True, verbose_name='return_worth')),
                ('voucher_num', models.IntegerField(verbose_name='voucher_num')),
                ('voucher_date', models.DateField(verbose_name='voucher_date')),
                ('temp_receipt_num', models.IntegerField(verbose_name='temp_receipt_num')),
                ('employee_remarks', models.TextField(blank=True, null=True, verbose_name='employee_remarks')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('director', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='nhsaleside_director', to='Management.EmployeeBase', verbose_name='director')),
                ('invoices', models.ManyToManyField(editable=False, to='Management.Invoice')),
                ('lawyer1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='nhsaleside1s', to='Management.Lawyer', verbose_name='lawyer')),
                ('lawyer2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='nhsaleside2s', to='Management.Lawyer', verbose_name='lawyer')),
                ('nhsale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='Management.NHSale')),
                ('payments', models.ManyToManyField(editable=False, to='Management.Payment')),
                ('sale_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.SaleType', verbose_name='action_type')),
                ('employee1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nhsaleside1s', to='Management.NHEmployee', verbose_name='advisor')),
                ('employee2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='nhsaleside2s', to='Management.NHEmployee', verbose_name='advisor')),
                ('employee3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='nhsaleside3s', to='Management.NHEmployee', verbose_name='advisor')),
                ('signing_advisor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nhsaleside_signer', to='Management.NHEmployee', verbose_name='signing_advisor')),
            ],
            options={
                'db_table': 'NHSaleSide',
            },
        ),
        migrations.CreateModel(
            name='NHPay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField()),
                ('month', models.PositiveSmallIntegerField()),
                ('amount', models.FloatField(verbose_name='amount')),
                ('employee', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='nhpays', to='Management.EmployeeBase')),
                ('lawyer', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='nhpays', to='Management.Lawyer')),
                ('nhsaleside', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='pays', to='Management.NHSaleSide')),
            ],
            options={
                'db_table': 'NHPay',
            },
        ),
        migrations.CreateModel(
            name='MediaReferrals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referrals_num', models.PositiveSmallIntegerField(verbose_name='referrals_num')),
                ('activity_base', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='Management.ActivityBase')),
                ('media', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='Management.Media', verbose_name='media')),
            ],
            options={
                'db_table': 'MediaReferrals',
            },
        ),
        migrations.CreateModel(
            name='MadadCP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(verbose_name='year')),
                ('month', models.PositiveSmallIntegerField(verbose_name='month')),
                ('publish_date', models.DateField(verbose_name='publish_date')),
                ('value', models.FloatField(verbose_name='value')),
            ],
            options={
                'db_table': 'MadadCP',
                'ordering': ['-publish_date'],
                'get_latest_by': 'publish_date',
                'unique_together': {('year', 'month')},
            },
        ),
        migrations.CreateModel(
            name='MadadBI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(verbose_name='year')),
                ('month', models.PositiveSmallIntegerField(verbose_name='month')),
                ('publish_date', models.DateField(verbose_name='publish_date')),
                ('value', models.FloatField(verbose_name='value')),
            ],
            options={
                'db_table': 'MadadBI',
                'ordering': ['-publish_date'],
                'get_latest_by': 'publish_date',
                'unique_together': {('year', 'month')},
            },
        ),
        migrations.CreateModel(
            name='LoanPay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='month')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='year')),
                ('amount', models.FloatField(verbose_name='amount')),
                ('deduct_from_salary', models.BooleanField(blank=True, choices=[(False, 'לא'), (True, 'כן')], help_text='deduct_from_salary_help', verbose_name='deduct_from_salary')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='loan_pays', to='Management.EmployeeBase', verbose_name='employee')),
            ],
            options={
                'db_table': 'LoanPay',
            },
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='amount')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='month')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='year')),
                ('date', models.DateField(help_text='loan_date_help', null=True, verbose_name='date')),
                ('pay_num', models.PositiveSmallIntegerField(verbose_name='pay_num')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='loans', to='Management.EmployeeBase', verbose_name='employee')),
            ],
            options={
                'db_table': 'Loan',
                'permissions': (('list_loan', 'Loans list'),),
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='offset',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.InvoiceOffset'),
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='year')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='month')),
                ('client_type', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='Management.ClientType', verbose_name='client_type')),
                ('deal', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='Management.Deal')),
                ('division_type', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='Management.DivisionType', verbose_name='division_type')),
                ('income_producer_type', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='Management.IncomeProducerType', verbose_name='income_producer_type')),
                ('income_type', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='Management.IncomeType', verbose_name='income_type')),
                ('invoice', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.Invoice')),
                ('payment', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.Payment')),
            ],
            options={
                'db_table': 'Income',
            },
        ),
        migrations.CreateModel(
            name='HouseVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('insert_date', models.DateTimeField(auto_now_add=True)),
                ('price', models.IntegerField(verbose_name='price')),
                ('house', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='versions', to='Management.House')),
                ('type', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='Management.PricelistType', verbose_name='pricelist_type')),
            ],
            options={
                'db_table': 'HouseVersion',
                'ordering': ['date'],
                'get_latest_by': 'insert_date',
            },
        ),
        migrations.AddField(
            model_name='house',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.HouseType', verbose_name='asset_type'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='date')),
                ('initiator', models.CharField(max_length=50, verbose_name='event_initiator')),
                ('subject', models.CharField(max_length=50, verbose_name='event_subject')),
                ('attendees', models.TextField(blank=True, max_length=200, null=True, verbose_name='event_attendees')),
                ('summary', models.TextField(blank=True, max_length=200, null=True, verbose_name='event_summary')),
                ('issues', models.TextField(blank=True, max_length=200, null=True, verbose_name='issues')),
                ('remarks', models.TextField(blank=True, max_length=200, null=True, verbose_name='remarks')),
                ('activity_base', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='Management.ActivityBase')),
            ],
            options={
                'db_table': 'Event',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='EmploymentTerms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary_base', models.PositiveIntegerField(verbose_name='salary base')),
                ('salary_net', models.NullBooleanField(choices=[(None, 'לא ידוע'), (False, 'ברוטו'), (True, 'נטו')], verbose_name='salary net')),
                ('safety', models.PositiveIntegerField(verbose_name='safety')),
                ('include_tax', models.BooleanField(blank=True, verbose_name='commission_include_tax')),
                ('include_lawyer', models.BooleanField(blank=True, verbose_name='commission_include_lawyer')),
                ('tax_deduction_source', models.NullBooleanField(choices=[(None, 'לא ידוע'), (False, 'פטור'), (True, 'יש')], verbose_name='tax_deduction_source')),
                ('tax_deduction_source_precentage', models.FloatField(blank=True, null=True, verbose_name='tax_deduction_source_precentage')),
                ('tax_deduction_date', models.DateField(blank=True, null=True, verbose_name='tax_deduction_date')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('hire_type', models.ForeignKey(help_text='hire_type_help', on_delete=django.db.models.deletion.PROTECT, to='Management.HireType', verbose_name='hire_type')),
            ],
            options={
                'db_table': 'EmploymentTerms',
            },
        ),
        migrations.CreateModel(
            name='EmployeeSalaryBaseStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('employeesalarybase', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='statuses', to='Management.EmployeeSalaryBase')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.EmployeeSalaryBaseStatusType')),
            ],
            options={
                'db_table': 'EmployeeSalaryBaseStatus',
                'ordering': ['date'],
                'get_latest_by': 'date',
            },
        ),
        migrations.AddField(
            model_name='employeebase',
            name='employment_terms',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='employeebase', to='Management.EmploymentTerms'),
        ),
        migrations.AddField(
            model_name='employeebase',
            name='reminders',
            field=models.ManyToManyField(editable=False, to='Management.Reminder'),
        ),
        migrations.CreateModel(
            name='DemandStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('demand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='statuses', to='Management.Demand')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.DemandStatusType')),
            ],
            options={
                'db_table': 'DemandStatus',
                'get_latest_by': 'date',
            },
        ),
        migrations.AddField(
            model_name='demand',
            name='invoices',
            field=models.ManyToManyField(blank=True, editable=False, related_name='demands', to='Management.Invoice'),
        ),
        migrations.AddField(
            model_name='demand',
            name='payments',
            field=models.ManyToManyField(blank=True, editable=False, related_name='demands', to='Management.Payment'),
        ),
        migrations.AddField(
            model_name='demand',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='demands', to='Management.Project', verbose_name='project'),
        ),
        migrations.AddField(
            model_name='demand',
            name='reminders',
            field=models.ManyToManyField(editable=False, to='Management.Reminder'),
        ),
        migrations.CreateModel(
            name='CityCallers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('callers_num', models.PositiveSmallIntegerField(verbose_name='callers_num')),
                ('activity_base', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='Management.ActivityBase')),
                ('city', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='Management.City', verbose_name='city')),
            ],
            options={
                'db_table': 'CityCallers',
            },
        ),
        migrations.CreateModel(
            name='CheckBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(unique=True, verbose_name='check_num')),
                ('issue_date', models.DateField(verbose_name='issue_date')),
                ('pay_date', models.DateField(verbose_name='payment_date')),
                ('amount', models.IntegerField(verbose_name='amount')),
                ('remarks', models.TextField(blank=True, verbose_name='remarks')),
                ('division_type', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='Management.DivisionType', verbose_name='division_type')),
                ('expense_type', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='Management.ExpenseType', verbose_name='expense_type')),
                ('invoice', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.Invoice')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.CheckBaseType', verbose_name='invoice')),
            ],
            options={
                'db_table': 'CheckBase',
                'ordering': ['division_type', 'expense_type'],
            },
        ),
        migrations.AddField(
            model_name='building',
            name='pricelist',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='building', to='Management.Pricelist'),
        ),
        migrations.AddField(
            model_name='building',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='buildings', to='Management.Project', verbose_name='project'),
        ),
        migrations.AddField(
            model_name='building',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.BuildingType', verbose_name='building_types'),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.TextField(editable=False, null=True)),
                ('add_time', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(upload_to='files', verbose_name='filename')),
                ('type', models.SmallIntegerField(choices=[(1, 'sent'), (2, 'received')], verbose_name='attachment_type')),
                ('sr_name', models.CharField(max_length=20, verbose_name='sr_name')),
                ('is_private', models.BooleanField(blank=True, verbose_name='is_private')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('content_type', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.ContentType')),
                ('tags', models.ManyToManyField(blank=True, related_name='attachments', to='Management.Tag', verbose_name='tags')),
                ('user_added', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='attachments', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'db_table': 'Attachment',
                'permissions': (('list_attachment', 'Can list attachments'),),
            },
        ),
        migrations.CreateModel(
            name='AdvancePayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='month')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='year')),
                ('amount', models.IntegerField(verbose_name='amount')),
                ('date_paid', models.DateField(editable=False, null=True)),
                ('is_paid', models.NullBooleanField(editable=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='advance_payments', to='Management.EmployeeBase', verbose_name='employee')),
            ],
            options={
                'db_table': 'AdvancePayment',
                'ordering': ['year', 'month'],
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.PositiveSmallIntegerField(verbose_name='storage_num')),
                ('size', models.FloatField(blank=True, null=True, verbose_name='size')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='storages', to='Management.Building', verbose_name='building')),
                ('house', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='storages', to='Management.House', verbose_name='house')),
            ],
            options={
                'db_table': 'Storage',
                'ordering': ['num'],
                'unique_together': {('building', 'num')},
            },
        ),
        migrations.CreateModel(
            name='Signup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='signup_date')),
                ('clients', models.TextField(verbose_name='clients')),
                ('clients_address', models.TextField(null=True, verbose_name='clients_address')),
                ('clients_phone', models.TextField(verbose_name='phone')),
                ('sale_date', models.DateField(verbose_name='predicted_sale_date')),
                ('price', models.IntegerField(verbose_name='signup_price')),
                ('price_include_lawyer', models.BooleanField(choices=[(False, 'לא'), (True, 'כן')], verbose_name='include_lawyer')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('cancel', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signup', to='Management.SignupCancel')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='signups', to='Management.House', verbose_name='house')),
                ('employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signups', to='Management.Employee', verbose_name='employee')),
            ],
            options={
                'verbose_name': 'signup',
                'db_table': 'Signup',
                'ordering': ['date'],
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='SaleCommissionDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission', models.CharField(max_length=30)),
                ('value', models.FloatField(null=True)),
                ('sale', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='commission_details', to='Management.Sale')),
                ('employee_salary', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='commission_details', to='Management.EmployeeSalary')),
            ],
            options={
                'db_table': 'SaleCommissionDetail',
                'ordering': ['commission', 'value'],
            },
        ),
        migrations.AddField(
            model_name='sale',
            name='employee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sales', to='Management.Employee', verbose_name='employee'),
        ),
        migrations.CreateModel(
            name='SalaryExpenses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='month')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='year')),
                ('income_tax', models.FloatField(verbose_name='income_tax')),
                ('national_insurance', models.FloatField(verbose_name='national_insurance')),
                ('health', models.FloatField(verbose_name='health')),
                ('pension_insurance', models.FloatField(verbose_name='pension_insurance')),
                ('vacation', models.FloatField(verbose_name='vacation')),
                ('convalescence_pay', models.FloatField(verbose_name='convalescence_pay')),
                ('employer_national_insurance', models.FloatField(verbose_name='employer_national_insurance')),
                ('employer_benefit', models.FloatField(verbose_name='employer_benefit')),
                ('compensation_allocation', models.FloatField(verbose_name='compensation_allocation')),
                ('approved_date', models.DateTimeField(editable=False, null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.EmployeeBase', verbose_name='employee')),
            ],
            options={
                'db_table': 'SalaryExpenses',
                'permissions': (('list_salaryexpenses', 'Can list salary expenses'), ('season_salaryexpenses', 'Season salary expenses'), ('season_total_salaryexpenses', 'Season total salary expenses')),
                'unique_together': {('employee', 'year', 'month')},
            },
        ),
        migrations.CreateModel(
            name='PriceOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=50, verbose_name='address')),
                ('rooms', models.FloatField(verbose_name='rooms')),
                ('clients', models.CharField(max_length=50, verbose_name='clients')),
                ('price_wanted', models.IntegerField(verbose_name='price_wanted')),
                ('price_offered', models.IntegerField(verbose_name='price_offered')),
                ('commission_seller', models.FloatField(verbose_name='commission_seller')),
                ('commission_buyer', models.FloatField(verbose_name='commission_buyer')),
                ('remarks', models.TextField(blank=True, max_length=200, null=True, verbose_name='remarks')),
                ('nhactivity', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='Management.NHActivity')),
                ('nhemployee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHEmployee', verbose_name='nhemployee')),
            ],
            options={
                'db_table': 'PriceOffer',
            },
        ),
        migrations.CreateModel(
            name='PaymentCheck',
            fields=[
                ('checkbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Management.CheckBase')),
                ('tax_deduction_source', models.IntegerField(blank=True, null=True, verbose_name='tax_deduction_source')),
                ('order_verifier', models.CharField(max_length=30, verbose_name='order_verifier')),
                ('payment_verifier', models.CharField(max_length=30, verbose_name='payment_verifier')),
                ('account', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.Account')),
                ('supplier_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.SupplierType', verbose_name='supplier_type')),
            ],
            options={
                'db_table': 'Check',
            },
            bases=('Management.checkbase',),
        ),
        migrations.CreateModel(
            name='ParkingCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.FloatField(verbose_name='cost')),
                ('pricelist', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parking_costs', to='Management.Pricelist')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.ParkingType', verbose_name='parking_type')),
            ],
            options={
                'db_table': 'ParkingCost',
                'unique_together': {('pricelist', 'type')},
            },
        ),
        migrations.CreateModel(
            name='Parking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.PositiveSmallIntegerField(verbose_name='parking_num')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parkings', to='Management.Building', verbose_name='building')),
                ('house', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='parkings', to='Management.House', verbose_name='house')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.ParkingType', verbose_name='parking_type')),
            ],
            options={
                'db_table': 'Parking',
                'ordering': ['num'],
                'unique_together': {('building', 'num')},
            },
        ),
        migrations.CreateModel(
            name='NHSaleCommissionDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission', models.CharField(max_length=30)),
                ('income', models.IntegerField(null=True)),
                ('precentage', models.FloatField(null=True)),
                ('amount', models.IntegerField()),
                ('nhsaleside', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.NHSaleSide')),
                ('nhemployeesalary', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHEmployeeSalary')),
            ],
            options={
                'db_table': 'NHSaleCommissionDetail',
            },
        ),
        migrations.CreateModel(
            name='NHCommission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='name')),
                ('left_amount', models.FloatField(blank=True, null=True, verbose_name='value')),
                ('right_amount', models.FloatField(verbose_name='value')),
                ('left_filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='left_nhcommission_set', to='Management.NHSaleFilter', verbose_name='filter')),
                ('left_income_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='left_nhcommission_set', to='Management.NHIncomeType', verbose_name='income_type')),
                ('nhbranch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHBranch', verbose_name='nhbranch')),
                ('operator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.Operator', verbose_name='operator')),
                ('right_amount_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.AmountType', verbose_name='value_type')),
                ('right_filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='right_nhcommission_set', to='Management.NHSaleFilter', verbose_name='filter')),
                ('right_income_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='right_nhcommission_set', to='Management.NHIncomeType', verbose_name='income_type')),
                ('nhemployee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHEmployee', verbose_name='nhemployee')),
            ],
            options={
                'db_table': 'NHCommission',
            },
        ),
        migrations.CreateModel(
            name='NHBranchEmployee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_manager', models.BooleanField(verbose_name='is_manager')),
                ('start_date', models.DateField(verbose_name='start_date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end_date')),
                ('nhbranch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHBranch', verbose_name='nhbranch')),
                ('nhemployee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHEmployee', verbose_name='nhemployee')),
            ],
            options={
                'db_table': 'NHBranchEmployee',
                'ordering': ['nhbranch', 'start_date'],
                'get_latest_by': 'start_date',
            },
        ),
        migrations.AddField(
            model_name='nhactivity',
            name='nhemployee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.NHEmployee', verbose_name='nhemployee'),
        ),
        migrations.CreateModel(
            name='HouseTypeBonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(verbose_name='amount')),
                ('bonus', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bonuses', to='Management.BHouseType')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.HouseType', verbose_name='house_type')),
            ],
            options={
                'db_table': 'HouseTypeBonus',
                'unique_together': {('bonus', 'type')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='house',
            unique_together={('building', 'num')},
        ),
        migrations.CreateModel(
            name='EPCommission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='start_date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end_date')),
                ('max', models.FloatField(blank=True, null=True, verbose_name='max_commission')),
                ('b_discount_save', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.BDiscountSave')),
                ('b_discount_save_precentage', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.BDiscountSavePrecentage')),
                ('b_house_type', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.BHouseType')),
                ('b_sale_rate', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.BSaleRate')),
                ('c_by_price', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.CByPrice')),
                ('c_var', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.CVar')),
                ('c_var_precentage', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.CVarPrecentage')),
                ('project', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='epcommission', to='Management.Project')),
                ('employee', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='commissions', to='Management.Employee')),
            ],
            options={
                'db_table': 'EPCommission',
            },
        ),
        migrations.CreateModel(
            name='EmployeeCheck',
            fields=[
                ('checkbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Management.CheckBase')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], verbose_name='month')),
                ('year', models.PositiveSmallIntegerField(choices=[(2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028)], verbose_name='year')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='checks', to='Management.EmployeeBase', verbose_name='employee')),
                ('purpose_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.PurposeType', verbose_name='purpose_type')),
            ],
            options={
                'db_table': 'EmployeeCheck',
            },
            bases=('Management.checkbase',),
        ),
        migrations.AddField(
            model_name='employee',
            name='main_project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='Management.Project', verbose_name='main_project'),
        ),
        migrations.AddField(
            model_name='employee',
            name='projects',
            field=models.ManyToManyField(blank=True, editable=False, related_name='employees', to='Management.Project', verbose_name='projects'),
        ),
        migrations.AddField(
            model_name='employee',
            name='rank',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.RankType', verbose_name='rank'),
        ),
        migrations.CreateModel(
            name='DemandDiff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='קבועה, משתנה, בונוס, קיזוז או לבחירתך', max_length=30, verbose_name='diff_type')),
                ('reason', models.CharField(blank=True, max_length=30, null=True, verbose_name='diff_reason')),
                ('amount', models.FloatField(verbose_name='amount')),
                ('demand', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='diffs', to='Management.Demand')),
            ],
            options={
                'db_table': 'DemandDiff',
                'unique_together': {('demand', 'type')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='demand',
            unique_together={('project', 'month', 'year')},
        ),
        migrations.CreateModel(
            name='CPriceAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.PositiveIntegerField(verbose_name='price')),
                ('amount', models.PositiveIntegerField(verbose_name='commission amount')),
                ('c_by_price', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='price_amounts', to='Management.CByPrice')),
            ],
            options={
                'db_table': 'CPriceAmount',
                'ordering': ['price'],
                'get_latest_by': 'price',
                'unique_together': {('price', 'c_by_price')},
            },
        ),
        migrations.CreateModel(
            name='CPrecentage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('precentage', models.FloatField(verbose_name='commission precentage')),
                ('index', models.PositiveSmallIntegerField(editable=False)),
                ('c_var_precentage', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='precentages', to='Management.CVarPrecentage')),
            ],
            options={
                'db_table': 'CPrecentage',
                'ordering': ['index'],
                'get_latest_by': 'index',
                'unique_together': {('index', 'c_var_precentage')},
            },
        ),
        migrations.CreateModel(
            name='CAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(verbose_name='commission amount')),
                ('index', models.PositiveSmallIntegerField(editable=False)),
                ('c_var', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='amounts', to='Management.CVar')),
            ],
            options={
                'db_table': 'ECAmount',
                'ordering': ['index'],
                'get_latest_by': 'index',
                'unique_together': {('index', 'c_var')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='building',
            unique_together={('project', 'num')},
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('activitybase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Management.ActivityBase')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.Employee', verbose_name='employee')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Management.Project', verbose_name='project')),
            ],
            options={
                'db_table': 'Activity',
            },
            bases=('Management.activitybase',),
        ),
    ]
